# -*- coding: utf-8 -*-
"""Spending-Income Segmentation Model using K-Means.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YYt4Lo3vvYOyKuAkE3DN0SdzAei-EtQW

# Importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""# Data collection and Analysis"""

!cp /content/drive/MyDrive/Datasets_for_ML_Projects/Mall_Customers.csv Mall_Customers.csv

# loading the data from csv file to a pandas dataframe
customer_data = pd.read_csv('Mall_Customers.csv')

# first 5 rows of dataset
customer_data.head()

# number of rows and columns
customer_data.shape

# getting some information about the dataset
customer_data.info()

# checking for missing values
customer_data.isnull().sum()

"""Choosing annual income column and spending score column"""

X = customer_data.iloc[:,[3,4]].values

print(X)

"""Choosing the number of clusters

WCSS -> Within clusters sum of squares
"""

# finding wcss values for different number of clusters

wcss = []

for i in range(1,11):

  kmeans = KMeans(n_clusters= i, init='k-means++', random_state=42)
  kmeans.fit(X)

  wcss.append(kmeans.inertia_)

# plot an elbow graph

sns.set()
plt.plot(range(1,11),wcss)
plt.title('The Elbow Point Graph')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

"""Optimum numbers of clusters is 5

# Training K-Means Clustering Model
"""

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=0)

# return a label for each data point based on their cluster
Y = kmeans.fit_predict(X)

print(Y)

"""# Visualizing the clusters"""

# plotting all the clusters and their centroid

plt.figure(figsize=(6,6))
plt.scatter(X[Y==0,0],X[Y==0,1],s=50,c='green',label='Cluster 1')
plt.scatter(X[Y==1,0],X[Y==1,1],s=50,c='red',label='Cluster 2')
plt.scatter(X[Y==2,0],X[Y==2,1],s=50,c='blue',label='Cluster 3')
plt.scatter(X[Y==3,0],X[Y==3,1],s=50,c='yellow',label='Cluster 4')
plt.scatter(X[Y==4,0],X[Y==4,1],s=50,c='violet',label='Cluster 5')

# plot the centroids
print(kmeans.cluster_centers_)
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=100,c='black',label='Centroids')

plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.legend()

